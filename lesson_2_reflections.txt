What happens when you initialize a repository?
A .git directory is created.
Why do you need to do it?
It is needed for .git to store metadata
of files, changes, etc.to be able to do
its work

How is the staging area different from the working directory and the repository?
It is feature of Git. Files on it are, for sure,
in the directory, but ready to be commited.
Only files in staging are are committed.

What value do you think it offers?
It offers the posibility of
commiting certain files on the directory
at once, hence allowing for a "logical commit".

How can you use the staging area to 
make sure you have one commit per logical change?

By adding to the staged area only the files
related to a logical change and then do the commit

What are some situations when branches would be helpful
in keeping your history organized? How would branches help?

Branches help in situation where we will add new features,
or experiment with big changes, but still wanting to have
something that works. Branches helps because it allows to
switch between them easily. 
git branch --> shows branch. Current branch preceded by *

git branch easy_mode --> creates "easy_mode" branch by
checking out current branch.
Now we have two branchs
$ git branch
   easy_mode
*  master

git checkout easy_mode --> makes "easy_mode" the
current branch.
Note:
git branch  - "new_branch" create a new branch 
"new_branch" and makes it the current one.
(Combines two git commands in one)

$ git branch
*   easy_mode
    master
//Edit and change a file
//Add to staging area
git add game.js
//commit the change
git commit -m"Make game simpler"

How do the diagrams help you visualize the branch structure?
Without a visual diagram it is very difficult to
grasp the branch structure.

compare a commit to its parent is git show commit_id

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

The changes of two branches are merged on the checkout branch.
A new commit with two parents because it includes all the 
commits of the two merged branches. All these commits will
be ordered in git log by timestamps.

Question: How to list graphs in git log ?
git --graph

What are the pros and cons of Git’s automatic merging vs.
always doing merges manually?
In automatic mode not all conflicts can be resolved.
Using manual mode we ensure what is correct.



 
 


